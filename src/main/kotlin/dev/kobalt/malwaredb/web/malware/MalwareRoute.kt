/*
 * dev.kobalt.malwaredb
 * Copyright (C) 2022 Tom.K
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package dev.kobalt.malwaredb.web.malware

import dev.kobalt.malwaredb.web.extension.pageArticle
import dev.kobalt.malwaredb.web.extension.pageLink
import dev.kobalt.malwaredb.web.extension.pageMarkdown
import dev.kobalt.malwaredb.web.extension.respondHtmlContent
import dev.kobalt.web.administration.uid.toUid
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.response.*
import io.ktor.routing.*
import kotlinx.html.div
import kotlinx.html.h3
import kotlinx.html.p
import kotlinx.html.style

fun Route.malwareRoute() = route(MalwareRepository.pageRoute) {
    get {
        call.respondHtmlContent(
            title = MalwareRepository.pageTitle,
            description = MalwareRepository.pageSubtitle
        ) {
            pageArticle(
                MalwareRepository.pageTitle,
                MalwareRepository.pageSubtitle
            ) {
                MalwareRepository.selectList().takeIf { it.isNotEmpty() }?.forEach { entity ->
                    pageLink(entity.title, null, "${entity.uid}/")
                } ?: run {
                    p { text(MalwareRepository.pageEmpty) }
                }
            }
        }
    }
    route("{uid}/") {
        get {
            call.parameters["uid"]?.toUid()?.let { MalwareRepository.selectItem(it) }?.let { entity ->
                call.respondHtmlContent(
                    title = entity.title,
                    description = null
                ) {
                    pageArticle(
                        entity.title,
                        null
                    ) {
                        if (entity.types?.contains("Group") != true) {
                            div {
                                style = "float: right; padding: 0px 0px 8px 16px;"
                                div {
                                    style = "background: #444444; padding: 8px 16px 8px 16px;"
                                    entity.types?.let {
                                        h3 { text("Type") }
                                        p { text(it.joinToString(", ")) }
                                    }
                                    entity.sizes?.let { list ->
                                        h3 { text("Size") }
                                        list.forEach {
                                            p {
                                                text(it.value.toString() + " bytes" + it.note?.let { " ($it)" }
                                                    .orEmpty())
                                            }
                                        }
                                    }
                                    entity.platforms?.let { list ->
                                        h3 { text("Platform") }
                                        list.forEach {
                                            p {
                                                text(it.name + it.note?.let { " ($it)" }.orEmpty())
                                            }
                                        }
                                    }
                                    entity.sourceLanguages?.let { list ->
                                        h3 { text("Source language") }
                                        list.forEach {
                                            p {
                                                text(it.name + it.note?.let { " ($it)" }.orEmpty())
                                            }
                                        }
                                    }
                                    entity.fileTypes?.let { list ->
                                        h3 { text("File type") }
                                        list.forEach {
                                            p {
                                                text(it.name + it.note?.let { " ($it)" }.orEmpty())
                                            }
                                        }
                                    }
                                    entity.authors?.let {
                                        h3 { text("Author") }
                                        p { text(it.joinToString(", ")) }
                                    }
                                    entity.locations?.let {
                                        h3 { text("Location") }
                                        p { text(it.joinToString(", ")) }
                                    }
                                    entity.timestamps?.let { list ->
                                        h3 { text("Timestamp") }
                                        list.forEach {
                                            p {
                                                text(it.value.toString() + it.note?.let { " ($it)" }
                                                    .orEmpty())
                                            }
                                        }
                                    }
                                    entity.aliases?.let { list ->
                                        h3 { text("Aliases") }
                                        list.forEach { p { text("${it.title} (${it.author})") } }
                                    }
                                }
                            }
                        }
                        pageMarkdown(entity.details.orEmpty())
                    }
                }
            } ?: call.respond(HttpStatusCode.NotFound)
        }
    }
}
